(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c730f"],{5020:function(n,t,i){"use strict";i.r(t);var a=function(){var n=this,t=n.$createElement,i=n._self._c||t;return i("v-content",[i("v-container",{attrs:{fluid:""}},[i("v-row",{attrs:{dense:""}},[n._l(n.cards,(function(t){return i("Card",n._b({key:t.title},"Card",t,!1))})),i("Implementation",{attrs:{implement:n.implement}}),i("CardImage",{attrs:{images:n.images}})],2)],1)],1)},e=[],r=function(){var n=this,t=n.$createElement,i=n._self._c||t;return i("v-col",{attrs:{cols:"12"}},[i("v-card",{staticClass:"mx-auto",attrs:{outlined:""}},[i("v-card-title",[n._v("Obrazy")]),i("v-row",{attrs:{dense:""}},[n._l(n.images,(function(n){return i("v-col",{key:n.src,staticClass:"d-sm-none",attrs:{cols:"12"}},[i("v-card",{staticClass:"mx-auto",attrs:{outlined:"","max-width":"95%"}},[i("v-img",{attrs:{alt:n.alt,src:n.src,"max-width":"60%"}})],1)],1)})),n._l(n.images,(function(n){return i("v-col",{key:n.src+"-sm",staticClass:"d-none d-sm-block",attrs:{cols:"6"}},[i("v-card",{staticClass:"mx-auto",attrs:{outlined:"","max-width":"95%"}},[i("v-img",{attrs:{alt:n.alt,src:n.src}})],1)],1)}))],2)],1)],1)},o=[],s={name:"CardImage",props:{images:{type:Array}}},c=s,l=i("2877"),d=i("6544"),m=i.n(d),u=i("b0af"),p=i("99d9"),g=i("62ad"),w=i("adda"),f=i("0fd9"),C=Object(l["a"])(c,r,o,!1,null,null,null),z=C.exports;m()(C,{VCard:u["a"],VCardTitle:p["c"],VCol:g["a"],VImg:w["a"],VRow:f["a"]});var I=i("ae8d"),b=i("b7d0"),v={name:"Mergesort",components:{Card:I["a"],CardImage:z,Implementation:b["a"]},data:function(){return{cards:[{title:"Merge Sort",subtitle:"Sortowanie przez scalanie",flex:12,content:"Wyróżnić można trzy podstawowe kroki:<br />\n          1. Podziel zestaw danych na dwie równe części.<br />\n          2. Zastosuj sortowanie przez scalanie dla każdej z nich oddzielnie, chyba że pozostał już tylko jeden element.<br />\n          3. Połącz posortowane podciągi w jeden ciąg posortowany."},{title:"Opis",subtitle:"",flex:6,content:""}],implement:[{lang:"c++",code:'#include <iostream>\n\nusing namespace std;\n\nconst int n = 10;\nint t[n] = {9,0,8,5,6,4,1,2,3,7};\n\nvoid print(int t[], int n){\n    for(int i=0; i<n; i++) cout << t[i] << " ";\n    cout << endl;\n}\n\nvoid mergeSort(int t[], int n){\n\n    if(n<2) return;\n\n    // PODZIA£ TABLICY NA DZIW PO£OWY\n    int n1=n/2;// ILOŒÆ ELEMENTÓW W TABLICY t1\n    int n2=n-n1;// ILOŒÆ ELEMENTÓW W TABLICY t2\n\n    int *t1 = new int[n1];\n    int *t2 = new int[n2];\n\n    int i=0;\n    for(int i1=0; i1<n1; i1++, i++) t1[i1]=t[i];\n    for(int i2=0; i2<n2; i2++, i++) t2[i2]=t[i];\n\n    // print(t1, n1);\n    // print(t2, n2);\n\n    // SORTOWANIE PO£ÓWEK\n    mergeSort(t1, n1);\n    mergeSort(t2, n2);\n\n    // SCALANIE PO£ÓWEK\n    int i1=0; // LICZBA ELEMENTÓW PRZEPISANYCH Z TABLICY t1\n    int i2=0; // LICZBA ELEMENTÓW PRZEPISANYCH Z TABLICY t2\n    for(int i=0; i<n; i++){\n        if(i1==n1){\n            t[i]=t2[i2];\n            i2++;\n            continue;\n        }\n\n        if(i2==n2){\n            t[i]=t1[i1];\n            i1++;\n            continue;\n        }\n\n        if(t1[i1]<t2[i2]) {\n            t[i]=t1[i1];\n            i1++;\n        } else {\n            t[i]=t2[i2];\n            i2++;\n        }\n    }\n}\n\nint main()\n{\n    print(t, n);\n    mergeSort(t, n);\n    print(t, n);\n    return 0;\n}'}],images:[{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c5/Merge_sort_animation2.gif/240px-Merge_sort_animation2.gif",alt:"Gif obrazujący działanie sortowania scalanie"},{src:"https://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif",alt:"Gif obrazujący działanie sortowania scalanie"},{src:"https://upload.wikimedia.org/wikipedia/commons/6/60/Mergesort_algorithm_diagram.png",alt:"Zdjęcie obrazujące działanie sortowania przez scalanie"}]}}},E=v,k=i("a523"),h=i("a75b"),A=Object(l["a"])(E,a,e,!1,null,null,null);t["default"]=A.exports;m()(A,{VContainer:k["a"],VContent:h["a"],VRow:f["a"]})}}]);
//# sourceMappingURL=chunk-2d0c730f.74ceba17.js.map