(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-3148c5c0"],{"0cf7":function(n,t,a){"use strict";a.r(t);var e=function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("v-content",[a("v-container",{attrs:{fluid:""}},[a("v-row",{attrs:{dense:""}},[n._l(n.cards,(function(t){return a("Card",n._b({key:t.title},"Card",t,!1))})),a("Implementation",{attrs:{implement:n.implement}}),a("CardImage",{attrs:{images:n.images}})],2)],1)],1)},i=[],r=a("5b44"),o=a("ae8d"),s=a("b7d0"),l={name:"Bucketsort",components:{Card:o["a"],CardImage:r["a"],Implementation:s["a"]},data:function(){return{cards:[{title:"Bucket Sort",subtitle:"Sortowanie kubełkowe",flex:12,content:"Jeden z algorytmów sortowania, najczęściej stosowany, gdy liczby w zadanym przedziale są rozłożone jednostajnie, ma on wówczas złożoność Θ(n). W przypadku ogólnym pesymistyczna złożoność obliczeniowa tego algorytmu wynosi O(n²).\n\nPomysł takiego sortowania podali po raz pierwszy w roku 1956 E. J. Issac i R. C. Singleton"},{title:"Sposób działania",subtitle:"",flex:12,content:"Idea działania algorytmu sortowania kubełkowego:</br>\n\n1. Podziel zadany przedział liczb na k podprzedziałów (kubełków) o równej długości.</br>\n2. Przypisz liczby z sortowanej tablicy do odpowiednich kubełków.</br>\n3. Sortuj liczby w niepustych kubełkach.</br>\n4. Wypisz po kolei zawartość niepustych kubełków.</br></br>\nZazwyczaj przyjmuje się, że sortowane liczby należą do przedziału od 0 do 1 - jeśli tak nie jest, to można podzielić każdą z nich przez największą możliwą (jeśli znany jest przedział) lub wyznaczoną. Należy tu jednak zwrócić uwagę, że wyznaczanie największej możliwej liczby w tablicy n-elementowej ma złożoność obliczeniową O(n)."}],implement:[{lang:"c++",code:'#include <iostream>\n\nusing namespace std;\n\nconst int n = 20;\nint t[n] = {2, 8, 3, 0, 7, 8, 5, 2, 1, 7, 2, 8, 3, 0, 8, 8, 5, 2, 1, 9};\n\nvoid print(int t[], int n)\n{\n    for (int i = 0; i < n; i++)\n        cout << t[i] << " ";\n    cout << endl;\n}\n\nvoid bucketSort(int t[], int n)\n{\n    int t2[n] = {0}; // PRZYJMUJEMY ZE ILOSC ELEMENTOW JEST ROWNA NAJWIEKSZEJ LICZBIE W TABLICY\n\n    for (int i = 0; i < n; i++)\n        t2[t[i]] += 1;\n\n    int k = 0;\n    for (int i = 0; i < n; i++)\n        for (int j = 0; j < t2[i]; j++)\n            t[k++] = i;\n}\n\nint main()\n{\n    print(t, n);\n\n    bucketSort(t, n);\n    print(t, n);\n\n    return 0;\n}'},{lang:"python",code:'def insertionSort(b): \n    for i in range(1, len(b)): \n        up = b[i] \n        j = i - 1\n        while j >=0 and b[j] > up:  \n            b[j + 1] = b[j] \n            j -= 1\n        b[j + 1] = up      \n    return b      \n              \ndef bucketSort(x): \n    arr = [] \n    slot_num = 10 # 10 means 10 slots, each \n                  # slot\'s size is 0.1 \n    for i in range(slot_num): \n        arr.append([]) \n          \n    # Put array elements in different buckets  \n    for j in x: \n        index_b = int(slot_num * j)  \n        arr[index_b].append(j) \n      \n    # Sort individual buckets  \n    for i in range(slot_num): \n        arr[i] = insertionSort(arr[i]) \n          \n    # concatenate the result \n    k = 0\n    for i in range(slot_num): \n        for j in range(len(arr[i])): \n            x[k] = arr[i][j] \n            k += 1\n    return x \n  \n# Driver Code \nx = [0.897, 0.565, 0.656, \n     0.1234, 0.665, 0.3434]  \nprint("Sorted Array is") \nprint(bucketSort(x))'}],images:[]}}},c=l,d=a("2877"),u=a("6544"),m=a.n(u),b=a("a523"),z=a("a75b"),p=a("0fd9b"),w=Object(d["a"])(c,e,i,!1,null,null,null);t["default"]=w.exports;m()(w,{VContainer:b["a"],VContent:z["a"],VRow:p["a"]})},"5b44":function(n,t,a){"use strict";var e=function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("v-col",{attrs:{cols:"12"}},[a("v-card",{staticClass:"mx-auto",attrs:{outlined:""}},[a("v-card-title",[n._v("Obrazy")]),a("v-row",{attrs:{dense:""}},[n._l(n.images,(function(n){return a("v-col",{key:n.src,staticClass:"d-sm-none",attrs:{cols:"12"}},[a("v-card",{staticClass:"mx-auto",attrs:{outlined:"","max-width":"95%"}},[a("v-img",{attrs:{alt:n.alt,src:n.src,"max-width":"60%"}})],1)],1)})),n._l(n.images,(function(n){return a("v-col",{key:n.src+"-sm",staticClass:"d-none d-sm-block",attrs:{cols:"6"}},[a("v-card",{staticClass:"mx-auto",attrs:{outlined:"","max-width":"95%"}},[a("v-img",{attrs:{alt:n.alt,src:n.src}})],1)],1)}))],2)],1)],1)},i=[],r={name:"CardImage",props:{images:{type:Array}}},o=r,s=a("2877"),l=a("6544"),c=a.n(l),d=a("b0af"),u=a("99d9"),m=a("62ad"),b=a("adda"),z=a("0fd9b"),p=Object(s["a"])(o,e,i,!1,null,null,null);t["a"]=p.exports;c()(p,{VCard:d["a"],VCardTitle:u["c"],VCol:m["a"],VImg:b["a"],VRow:z["a"]})}}]);
//# sourceMappingURL=chunk-3148c5c0.2f7b8eb8.js.map