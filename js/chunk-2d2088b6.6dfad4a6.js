(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d2088b6"],{a4f3:function(n,a,e){"use strict";e.r(a);var t=function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("v-content",[e("v-container",{attrs:{fluid:""}},[e("v-row",{attrs:{dense:""}},[n._l(n.cards,(function(a){return e("Card",n._b({key:a.title},"Card",a,!1))})),e("Implementation",{attrs:{implement:n.implement}})],2)],1)],1)},i=[],r=e("ae8d"),o=e("b7d0"),c={name:"Bubblesort",components:{Card:r["a"],Implementation:o["a"]},data:function(){return{cards:[{title:"Bubble sort",subtitle:"Sortowanie bąbelkowe",flex:12,content:"Prosta metoda sortowania o złożoności czasowej i pamięciowej\n              Polega na porównywaniu dwóch kolejnych elementów i zamianie ich\n              kolejności, jeżeli zaburza ona porządek, w jakim się sortuje\n              tablicę. Sortowanie kończy się, gdy podczas kolejnego przejścia\n              nie dokonano żadnej zmiany."},{title:"Dowód matematyczny",subtitle:"",flex:12,content:"Algorytm opiera się na zasadzie maksimum, tj. każda liczba jest\n              mniejsza lub równa od liczby maksymalnej. Porównując kolejno\n              liczby można wyznaczyć największą z nich. Następnie ciąg częściowo\n              posortowany (mający liczbę maksymalną), można skrócić o tę liczbę\n              i ponowić szukanie maksimum, już bez elementów odrzuconych i tak\n              długo, aż zostanie nam jeden element. Otrzymane kolejne maksima są\n              coraz mniejsze przez co ciąg jest uporządkowany."}],images:[{src:"https://media.giphy.com/media/fdFQlt5A45jyw/giphy.gif",alt:"Gif obrazujący działanie sortowania bąbelkowego"},{src:"https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fhowtodoinjava.com%2Fwp-content%2Fuploads%2F2015%2F10%2Fbubble-sort-algorithm.png&f=1&nofb=1",alt:"Obrazek przedstawiający działanie sortowania bąbelkowego"}],implement:[{lang:"c++",code:'#include <iostream>\n\nusing namespace std;\n\nconst int n = 10;\nint t[n] = {4,3,6,8,7,9,0,1,2,5};\n\nvoid print(int t[], int n)\n{\n    for(int i=0; i<n; i++) cout << t[i] << " ";\n    cout << endl;\n}\n\nvoid bubbleSort(int t[], int n)\n{\n    for (int i=0; i<n; i++)\n        for(int j=i; j<n; j++) if(t[j] < t[i]) swap(t[i], t[j]);\n}\n\nint main()\n{\n    bubbleSort(t, n);\n    print(t, n);\n    return 0;\n}'},{lang:"python",code:'def bubbleSort(arr):\n    n = len(arr)\n \n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n \narr = [64, 34, 25, 12, 22, 11, 90]\n \nbubbleSort(arr)\n \nprint ("Sorted array is:")\nfor i in range(len(arr)):\n    print ("%d" %arr[i]), '},{lang:"javascript",code:"function swap(arr, first_Index, second_Index){\n    var temp = arr[first_Index];\n    arr[first_Index] = arr[second_Index];\n    arr[second_Index] = temp;\n}\n\nfunction bubble_Sort(arr){\n\n    var len = arr.length,\n        i, j, stop;\n\n    for (i=0; i < len; i++){\n        for (j=0, stop=len-i; j < stop; j++){\n            if (arr[j] > arr[j+1]){\n                swap(arr, j, j+1);\n            }\n        }\n    }\n\n    return arr;\n}"}]}}},s=c,l=e("2877"),d=e("6544"),m=e.n(d),u=e("a523"),b=e("a75b"),j=e("0fd9b"),p=Object(l["a"])(s,t,i,!1,null,null,null);a["default"]=p.exports;m()(p,{VContainer:u["a"],VContent:b["a"],VRow:j["a"]})}}]);
//# sourceMappingURL=chunk-2d2088b6.6dfad4a6.js.map