{"version":3,"sources":["pages/bubbleSort.jsx","pages/insertionSort.jsx","pages/selectionSort.jsx","pages/mergeSort.jsx","pages/quickSort.jsx","components/Item.jsx","pages/home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["javascriptCode","BubbleSortView","className","language","style","github","src","alt","InsertionSortView","SelectionSortView","MergeSortView","QuickSortView","Item","props","parser","document","createElement","href","hostname","target","rel","title","content","linksYoutube","linksWebsite","HomeView","map","el","key","React","Component","App","to","path","Boolean","window","location","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c9766f43.chunk.js","sourcesContent":["import React from \"react\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport github from \"react-syntax-highlighter/dist/cjs/styles/hljs/github\";\n\nconst javascriptCode = `function bubbleSort(tab) {\n  let tablica = [...tab], // Kopia tablicy\n    n = tablica.length\n\n  while (n > 1) {\n    for (let i = 0; i < n - 1; i++) {\n      if (tablica[i] > tablica[i + 1])\n        ;[tablica[i], tablica[i + 1]] = [tablica[i + 1], tablica[i]] // Zamiana miejscami\n    }\n    n--\n  }\n  return tablica\n}`;\n\nexport default function BubbleSortView() {\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"card col m-3\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Bubble Sort</h5>\n            <h6 className=\"card-subtitle mb-2 text-muted\">\n              Sortowanie bąbelkowe\n            </h6>\n            <p className=\"card-text\">\n              Prosta metoda sortowania o złożoności czasowej i pamięciowej\n              Polega na porównywaniu dwóch kolejnych elementów i zamianie ich\n              kolejności, jeżeli zaburza ona porządek, w jakim się sortuje\n              tablicę. Sortowanie kończy się, gdy podczas kolejnego przejścia\n              nie dokonano żadnej zmiany.\n            </p>\n            <p className=\"card-text\">\n              <small className=\"text-muted\">Źródło: Wikipedia</small>\n            </p>\n          </div>\n        </div>\n\n        <div className=\"card col m-3\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Dowód matematyczny</h5>\n            <p className=\"card-text\">\n              Algorytm opiera się na zasadzie maksimum, tj. każda liczba jest\n              mniejsza lub równa od liczby maksymalnej. Porównując kolejno\n              liczby można wyznaczyć największą z nich. Następnie ciąg częściowo\n              posortowany (mający liczbę maksymalną), można skrócić o tę liczbę\n              i ponowić szukanie maksimum, już bez elementów odrzuconych i tak\n              długo, aż zostanie nam jeden element. Otrzymane kolejne maksima są\n              coraz mniejsze przez co ciąg jest uporządkowany.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"card col m-3\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Implementacja w JavaScript</h5>\n            <h6 className=\"card-subtitle mb-2 text-muted\">ECMAScript 6</h6>\n            <p className=\"card-text\">\n              <SyntaxHighlighter language=\"javascript\" style={github}>\n                {javascriptCode}\n              </SyntaxHighlighter>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"card col m-3\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Gif'y</h5>\n            <p className=\"card-text\">\n              <img\n                src=\"https://media.giphy.com/media/fdFQlt5A45jyw/giphy.gif\"\n                alt=\"Gif obrazujący działanie sortowania bąbelkowego\"\n              />\n            </p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function InsertionSortView() {\n  return <div>Insertion Sort</div>;\n}\n\n// export default function insertionSort(tab) {\n//     let tablica = [...tab] // Kopia tablicy\n//     let n = tablica.length,\n//         porownania = 0\n\n//     for (let i = 1; i < n; i++) {\n//         let klucz = tablica[i]\n//         let j = i - 1\n\n//         while (j >= 0 && tablica[j] > klucz) {\n//             porownania++\n\n//             tablica[j + 1] = tablica[j]\n//             j--\n//         }\n//         j++\n//         tablica[j] = klucz\n//     }\n\n//     return `----- INSERTION SORT ----- ( Sortowanie przez wstawianie )\n// Porównania: ${porownania++},\n// Posortowana tablica: [${tablica}]`\n// }\n","import React from \"react\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport github from \"react-syntax-highlighter/dist/cjs/styles/hljs/github\";\n\nconst javascriptCode = `function selectionSort(tab) {\n  \n}`;\n\nexport default function SelectionSortView() {\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"card col m-3\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Selection Sort</h5>\n            <h6 className=\"card-subtitle mb-2 text-muted\">\n              Sortowanie przez wybieranie\n            </h6>\n            <p className=\"card-text\">\n              jedna z prostszych metod sortowania o złożoności O(n2). Polega na\n              wyszukaniu elementu mającego się znaleźć na żądanej pozycji i\n              zamianie miejscami z tym, który jest tam obecnie. Operacja jest\n              wykonywana dla wszystkich indeksów sortowanej tablicy.\n            </p>\n            <p className=\"card-text\">\n              <small className=\"text-muted\">Źródło: Wikipedia</small>\n            </p>\n          </div>\n        </div>\n\n        <div className=\"card col m-3\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Opis</h5>\n            <p className=\"card-text\">\n              Algorytm przedstawia się następująco: <br />\n              <br />\n              1. Wyszukaj minimalną wartość z tablicy spośród elementów od i do\n              końca tablicy <br />\n              2. Zamień wartość minimalną, z elementem na pozycji i <br />\n              <br />\n              Gdy zamiast wartości minimalnej wybierana będzie maksymalna,\n              wówczas tablica będzie posortowana od największego do\n              najmniejszego elementu. Algorytm jest niestabilny. Przykładowa\n              lista to: [2a,2b,1] → [1,2b,2a] (gdzie 2b=2a)\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"card col m-3\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Implementacja w JavaScript</h5>\n            <h6 className=\"card-subtitle mb-2 text-muted\">ECMAScript 6</h6>\n            <p className=\"card-text\">\n              <SyntaxHighlighter language=\"javascript\" style={github}>\n                {javascriptCode}\n              </SyntaxHighlighter>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"card col m-3\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Gif'y</h5>\n            <p className=\"card-text\">\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b0/Selection_sort_animation.gif/240px-Selection_sort_animation.gif\"\n                alt=\"Gif obrazujący działanie sortowania bąbelkowego\"\n              />\n            </p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport github from \"react-syntax-highlighter/dist/cjs/styles/hljs/github\";\n\nconst javascriptCode = `function selectionSort(tab) {\n  \n}`;\n\nexport default function MergeSortView() {\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"card col m-3\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Merge Sort</h5>\n            <h6 className=\"card-subtitle mb-2 text-muted\">\n              Sortowanie przez scalanie\n            </h6>\n            <p className=\"card-text\">\n              Wyróżnić można trzy podstawowe kroki[1]: Podziel zestaw danych na\n              dwie równe części[4]. Zastosuj sortowanie przez scalanie dla\n              każdej z nich oddzielnie, chyba że pozostał już tylko jeden\n              element. Połącz posortowane podciągi w jeden ciąg posortowany. W\n              pseudokodzie algorytm można zapisać następująco[1]:\n            </p>\n            <p className=\"card-text\">\n              <small className=\"text-muted\">Źródło: Wikipedia</small>\n            </p>\n          </div>\n        </div>\n\n        <div className=\"card col m-3\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Opis</h5>\n            <p className=\"card-text\"></p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"card col m-3\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Implementacja w JavaScript</h5>\n            <h6 className=\"card-subtitle mb-2 text-muted\">ECMAScript 6</h6>\n            <p className=\"card-text\">\n              <SyntaxHighlighter language=\"javascript\" style={github}>\n                {javascriptCode}\n              </SyntaxHighlighter>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"card col m-3\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Gif'y</h5>\n            <p className=\"card-text\">\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c5/Merge_sort_animation2.gif/240px-Merge_sort_animation2.gif\"\n                alt=\"Gif obrazujący działanie sortowania scalanie\"\n              />\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif\"\n                alt=\"Gif obrazujący działanie sortowania scalanie\"\n              />\n              <img\n                src=\"https://upload.wikimedia.org/wikipedia/commons/6/60/Mergesort_algorithm_diagram.png\"\n                alt=\"Zdjęcie obrazujące działanie sortowania przez scalanie\"\n              />\n            </p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function QuickSortView() {\n  return <div>Quick Sort</div>;\n}\n","import React from \"react\";\n\nconst Item = props => {\n  // Regex\n  const parser = document.createElement(\"a\");\n  parser.href = props.href;\n  const hostname = parser.hostname;\n\n  return (\n    <a\n      href={props.href}\n      className=\"list-group-item list-group-item-action\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <div className=\"d-flex w-100 justify-content-between\">\n        <h5 className=\"mb-1 text-primary\">{props.title}</h5>\n        <small>{hostname}</small>\n      </div>\n      <p className=\"mb-1\">{props.content}</p>\n      <small className=\"text-primary\">{props.href}</small>\n    </a>\n  );\n};\n\nexport default Item;\n","import React from \"react\";\nimport Item from \"../components/Item\";\n\nconst linksYoutube = [\n  {\n    title: \"15 Sorting Algorithms in 6 Minutes\",\n    href: \"https://www.youtube.com/watch?v=kPRA0W1kECg\",\n    content: `Visualization and \"audibilization\" of 15 Sorting Algorithms in 6 Minutes.\nSorts random shuffles of integers, with both speed and the number of items adapted to each algorithm's complexity.`,\n  },\n  {\n    title: \"Visualization and Comparison of Sorting Algorithms\",\n    href: \"https://www.youtube.com/watch?v=ZZuD6iUe3Pc\",\n    content: `Visualization and comparison of 9 different sorting algorithms:\nselection sort,\nshell sort,\ninsertion sort,\nmerge sort,\nquick sort,\nheap sort,\nbubble sort,\ncomb sort,\ncocktail sort.`,\n  },\n  {\n    title: \"16 Sorts - Color Circle\",\n    href: \"https://www.youtube.com/watch?v=y9Ecb43qw98&t=226s\",\n    content: `Circle Sorting Visualizer/Audiolizer.`,\n  },\n];\n\nconst linksWebsite = [\n  {\n    title: \"Algorytmy Sortowania\",\n    href: \"http://www.algorytm.org/algorytmy-sortowania/\",\n    content:\n      \"Algorytmy sortowania, zarówno te proste jak i bardziej zaawansowane i wydajne, scalanie ciągów, ...\",\n  },\n  {\n    title: \"Programowanie i algorytmy\",\n    href: \"http://algorytm.edu.pl/\",\n    content: `Serwis został podzielony na kilka kategorii:\nProgramowanie w C++ - kurs języka C++,\nZadania - zadania z rozwiązaniami podzielone tematycznie,\nĆwiczenia - ćwiczenia do samodzielnego rozwiązania. Niektóre z nich można testować na automatycznej sprawdzarce,\nMatura - zadania programistyczne przygotowujące do matury oraz arkusze maturalne z informatyki`,\n  },\n  {\n    title: \"Khan Academy - Algorytmy\",\n    href: \"https://pl.khanacademy.org/computing/computer-science/algorithms\",\n    content:\n      \"Wspólnie z profesorami z Dartmouth College Tomem Cormenem i Devinem Balkcom przygotowaliśmy wstępny kurs algorytmów, obejmujący między innymi przeszukiwanie, sortowanie, rekurencję i teorię grafów. Skorzystaj z artykułów, wizualizacji, quizów i problemów do rozwiązania aby nauczyć się podstaw algorytmów.\",\n  },\n  {\n    title: \"Sorting Algorithms\",\n    href: \"https://www.geeksforgeeks.org/sorting-algorithms/\",\n    content:\n      \"A Sorting Algorithm is used to rearrange a given array or list elements according to a comparison operator on the elements. The comparison operator is used to decide the new order of element in the respective data structure.\",\n  },\n];\n\nclass HomeView extends React.Component {\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"card col-12 mt-5\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Filmy</h5>\n            {/* <h6 className=\"card-subtitle mb-2 text-muted\">Youtube</h6> */}\n            <div className=\"list-group\">\n              {linksYoutube.map(el => (\n                <Item\n                  title={el.title}\n                  content={el.content}\n                  href={el.href}\n                  key={el.href}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"card col-12 mt-5\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Strony internetowe</h5>\n            <div className=\"list-group\">\n              {linksWebsite.map(el => (\n                <Item\n                  title={el.title}\n                  content={el.content}\n                  href={el.href}\n                  key={el.href}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default HomeView;\n","import React, { Component } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n} from \"react-router-dom\";\nimport BubbleSortView from \"./pages/bubbleSort\";\nimport InsertionSortView from \"./pages/insertionSort\";\nimport SelectionSortView from \"./pages/selectionSort\";\nimport MergeSortView from \"./pages/mergeSort\";\nimport QuickSortView from \"./pages/quickSort\";\nimport HomeView from \"./pages/home\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <header>\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n              <NavLink to=\"/\" className=\"navbar-brand\">\n                Algorytmy sortowania\n              </NavLink>\n              <div className=\"collapse navbar-collapse\">\n                <ul className=\"navbar-nav mr-auto\">\n                  <li className=\"nav-item\">\n                    <NavLink to=\"/bubblesort\" className=\"nav-link\">\n                      Bubble Sort\n                    </NavLink>\n                  </li>\n                  <li className=\"nav-item\">\n                    <NavLink to=\"/insertionsort\" className=\"nav-link\">\n                      Insertion Sort\n                    </NavLink>\n                  </li>\n                  <li className=\"nav-item\">\n                    <NavLink to=\"/selectionsort\" className=\"nav-link\">\n                      Selection Sort\n                    </NavLink>\n                  </li>\n                  <li className=\"nav-item\">\n                    <NavLink to=\"/mergesort\" className=\"nav-link\">\n                      Merge Sort\n                    </NavLink>\n                  </li>\n                  <li className=\"nav-item\">\n                    <NavLink to=\"/quicksort\" className=\"nav-link\">\n                      Quick Sort\n                    </NavLink>\n                  </li>\n                </ul>\n              </div>\n            </nav>\n          </header>\n        </div>\n\n        <main className=\"container\">\n          <Switch>\n            <Route path=\"/bubblesort\">\n              <BubbleSortView />\n            </Route>\n            <Route path=\"/insertionsort\">\n              <InsertionSortView />\n            </Route>\n            <Route path=\"/selectionsort\">\n              <SelectionSortView />\n            </Route>\n            <Route path=\"/mergesort\">\n              <MergeSortView />\n            </Route>\n            <Route path=\"/quicksort\">\n              <QuickSortView />\n            </Route>\n            <Route path=\"/\">\n              <HomeView />\n            </Route>\n          </Switch>\n        </main>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}